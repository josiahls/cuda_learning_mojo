[project]
authors = ["Josiah Laivins <jklaivins@gmail.com>"]
channels = [
    "https://conda.modular.com/max-nightly", 
    "https://repo.prefix.dev/modular-community", 
    "conda-forge"
]
name = "cuda_learning_mojo"
platforms = ["linux-64", "linux-aarch64", "osx-arm64"]
version = "0.1.0"
license = "Apache-2.0"
license-file = "LICENSE"
homepage = "https://github.com/josiahls/cuda_learning_mojo"
repository = "https://github.com/josiahls/cuda_learning_mojo"

[environments]
stdlib-dev = {features = ["stdlib-dev"]}

[dependencies]
mojo = ">=0.25.7.0.dev2025101805,<0.26"
pre-commit = ">=4.3.0,<5"

[activation.env]
CUDA_LEARNING_INCLUDES = " -I ."
GPU_ARCH = "sm_75"

[tasks]
########################## Pre-commit Configuration ###########################
install_pre_commit_hooks = { cmd = [
    "pre-commit", "install"
], outputs = [".git/hooks/pre-commit"]}

############################### Core API ######################################
# NOTE: If we want to use the stdlib, we need to run the update_stdlib during configure to make dev work convenient.
# pixi supports overriding the default task, but then the user gets prompted on which task they are to run every time.
configure = { cmd = [
    "bash", "-c", 
    "echo 'configuring' && if [ \"$PIXI_ENVIRONMENT_NAME\" = \"stdlib-dev\" ]; then echo 'Running in stdlib-dev environment, updating stdlib...'; pixi run update_stdlib; fi"
], depends-on = [ "install_pre_commit_hooks" ] }

package = { cmd = [
    "mojo", "package", "$CUDA_LEARNING_INCLUDES", "cuda_learning_mojo",
], depends-on = [ "configure" ]}

format = { cmd = [
    "mojo", "format", "cuda_learning_mojo"
]}

build = { cmd = [
    "mojo", "build", "$CUDA_LEARNING_INCLUDES", "-g1", "example_binding_gen.mojo"
]}

cuda = { cmd = [
    "mkdir", "-p", "build/{{ cuda_file_dir }}",
    "&&",
    "nvcc",
    "-arch", "$GPU_ARCH", 
    "-o", "build/{{ cuda_file_dir }}/{{ cuda_file_name }}",
    "{{ cuda_file_dir }}/{{ cuda_file_name }}.cu", 
    "&&",
    "build/{{ cuda_file_dir }}/{{ cuda_file_name }}"
], args = [
    { arg = "cuda_file_dir" },
    { arg = "cuda_file_name" },
]}

c = { cmd = [
    "mkdir", "-p", "build/{{ c_file_dir }}",
    "&&",
    "nvcc",
    "-o", "build/{{ c_file_dir }}/{{ c_file_name }}_c",
    "{{ c_file_dir }}/{{ c_file_name }}.c", 
    "&&",
    "build/{{ c_file_dir }}/{{ c_file_name }}_c"
], args = [
    { arg = "c_file_dir" },
    { arg = "c_file_name" },
]}

############################ Git Ops ##########################################
push = "git push --force-with-lease"

i_rebase = { cmd = [
    "git", "rebase", "-i", "HEAD~{{ n_commits}}"
], args = [{ arg = "n_commits", default = "1" }]}


########################## Testing Configuration ##############################

run_test = { cmd = [
    "mojo", "run", "$CUDA_LEARNING_INCLUDES", "tests/test_c_project/mojo/test_{{ test_file_name }}.mojo"
], depends-on = [ 
    "configure",
    "build"
], args = [
    { arg = "test_file_name" }
]}

run_test_debug = { cmd = [
    "mojo", "debug", "$CUDA_LEARNING_INCLUDES", "tests/test_c_project/mojo/test_{{ test_file_name }}.mojo"
], depends-on = [ 
    "configure",
    "build"
], args = [
    { arg = "test_file_name" }
]}


run_tests = { cmd = [
    "bash", "./scripts/run-tests.sh"
]}

test_all = { depends-on = [ 
    "package",
    "run_tests"
]}

[feature.stdlib-dev.activation.env]
MODULAR_MOJO_MAX_IMPORT_PATH="$PIXI_PROJECT_ROOT/modular/bazel-bin"
# MOJO_ENABLE_STACK_TRACE_ON_ERROR="1"

[feature.stdlib-dev.tasks]
########################## Mojo Standard Library ##############################
clone_stdlib = { cmd = [
    "bash", "-c", 
    "if [ ! -d modular ] && [ ! -L modular ]; then git clone https://github.com/modular/modular.git; else echo 'Modular directory already exists.'; fi"
]}

sym_link_stdlib = { cmd = [
    "bash", "-c", 
    "if [ ! -L modular ] && [ -d $PIXI_PROJECT_ROOT/../c_binder_mojo/modular ]; then ln -s $PIXI_PROJECT_ROOT/../c_binder_mojo/modular modular; else echo 'Modular directory already exists.'; fi"
]}

update_stdlib = { cmd = [
    "cd", "modular", "&&",
    "./bazelw", "build", "//mojo/stdlib/stdlib"
], depends-on = [ "sym_link_stdlib", "clone_stdlib" ]}

clean_update_stdlib = { cmd = [
    "cd", "modular", "&&",
    "git", "switch", "main", "&&",
    "git", "fetch", "origin", "&&",
    "git", "reset", "--hard", "origin/main", "&&",
    "./bazelw", "build", "//mojo/stdlib/..."
], depends-on = [ "clone_stdlib" ]}

